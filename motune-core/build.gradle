plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'

    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    maven {
        url = uri('https://frcmaven.wpi.edu/artifactory/release/')
    }
}

dependencies {
    def wpilibversion = "2023.4.3"
    
    implementation 'org.ini4j:ini4j:0.5.4'

    implementation "edu.wpi.first.wpilibj:wpilibj-java:${wpilibversion}"
    implementation "edu.wpi.first.ntcore:ntcore-java:${wpilibversion}"

    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

    // Use the Kotlin JDK 8 standard library.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.0.1-jre'

    // Use the Kotlin test library.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // Use the Kotlin JUnit integration.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
}

tasks.register('fatJar', Jar) {
    // We build a "fat jar" that contains all the dependencies (ini4j, kotlin stdlib, etc.),
    // so that we don't need to also include the dependencies every time we use the library in robot code

    archiveAppendix = 'fatJar'

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
