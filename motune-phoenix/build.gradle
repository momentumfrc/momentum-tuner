plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'

    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    id 'maven-publish'
}

group = 'com.momentum4999.motune'
version = '0.0.1'
description = 'motune-phoenix'

dependencies {
    def phoenixversion = '5.30.4'

    api project(':motune-core')
    api "com.ctre.phoenix:api-java:${phoenixversion}"
    api "com.ctre.phoenix:wpiapi-java:${phoenixversion}"
    api "edu.wpi.first.wpilibj:wpilibj-java:${wpilibversion}"

    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

    // Use the Kotlin JDK 8 standard library.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    // Use the Kotlin test library.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // Use the Kotlin JUnit integration.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
}

tasks.register('fatJar', Jar) {
    // We build a "fat jar" that contains all the dependencies (ini4j, kotlin stdlib, etc.),
    // so that we don't need to also include the dependencies every time we use the library in robot code

    // We build a "fat jar" that contains all the dependencies (ini4j, kotlin stdlib, etc.),
    // so that we don't need to also include the dependencies every time we use the library in robot code

    archiveAppendix = 'fatJar'

    println("Compiling fatJar for " + project.description)
    def dependencies = configurations.compileClasspath.filter{
        def name = it.name
        it.exists() && !it.isDirectory() && excludeFromFatJar.every {!name.startsWith(it) }
    }.each{ println(it) }.collect{ zipTree(it) }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { dependencies }
    with jar
}
